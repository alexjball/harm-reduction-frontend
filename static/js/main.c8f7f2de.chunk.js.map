{"version":3,"sources":["TopBar.js","Airtable.js","widgets.js","Incidents.js","Participants.js","Engagements.js","Home.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["Container","fluid","className","Row","to","label","Item","exact","activeClassName","embed","config","backgroundColor","useCardLayout","viewControls","showRefresh","style","props","ref","useRef","Button","variant","margin","onClick","current","src","title","frameBorder","width","height","background","border","marginBottom","Base","RecordParticipantForm","RecordIncidentForm","RecordEngagementForm","OutstandingIncidents","Participants","EngagementsByParticipants","P","children","fontWeight","Airtable","href","path","Incidents","Engagements","Home","App","TopBar","Content","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c8f7f2de.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport { NavLink } from 'react-router-dom';\nimport './App.css';\n\nexport default () => {\n  return (\n    <Container fluid className=\"top-bar\">\n      <Row>\n        <Item to=\"/\" label=\"Home\" />\n        <Item to=\"/participants\" label=\"Participants\" />\n        <Item to=\"/incidents\" label=\"Incidents\" />\n        <Item to=\"/engagements\" label=\"Engagements\" />\n      </Row>\n    </Container>\n  );\n};\n\nconst Item = ({ to, label }) => (\n  <NavLink\n    exact\n    className=\"top-bar-nav-link\"\n    to={to}\n    activeClassName=\"active-top-bar-nav-link\"\n  >\n    {label}\n  </NavLink>\n);\n","import React, { useRef } from 'react';\nimport Button from 'react-bootstrap/Button';\n\nconst embed = config => ({\n  backgroundColor = 'gray',\n  useCardLayout = config.useCardLayout,\n  viewControls = true,\n  showRefresh = config.showRefresh,\n  style,\n  ...props\n}) => {\n  const ref = useRef(null);\n\n  return (\n    <div>\n      {showRefresh && (\n        <Button\n          variant=\"outline-secondary\"\n          style={{ margin: '10px' }}\n          onClick={() => (ref.current.src += '')}\n        >\n          Refresh Table\n        </Button>\n      )}\n      <iframe\n        ref={ref}\n        title=\"Base\"\n        className=\"airtable-embed\"\n        src={`${config.src}?backgroundColor=${backgroundColor}${\n          useCardLayout ? '&layout=card' : ''\n        }${viewControls ? '&viewControls=on' : ''}`}\n        frameBorder=\"0\"\n        width=\"100%\"\n        height=\"533\"\n        style={{\n          background: 'transparent',\n          border: '1px solid #ccc',\n          marginBottom: '50px',\n          ...style,\n        }}\n        {...props}\n      />\n    </div>\n  );\n};\n\nexport default {\n  Base: embed({\n    src: 'https://airtable.com/embed/shrmD4T1dU1VdykBo',\n    showRefresh: true,\n    useCardLayout: true,\n  }),\n  RecordParticipantForm: embed({\n    src: 'https://airtable.com/embed/shrFwOTOVDGbQDmMP',\n  }),\n  RecordIncidentForm: embed({\n    src: 'https://airtable.com/embed/shrvsr3brVYusYc8R',\n  }),\n  RecordEngagementForm: embed({\n    src: 'https://airtable.com/embed/shrE7xnBvZHXOftfp',\n  }),\n  OutstandingIncidents: embed({\n    src:\n      'https://airtable.com/embed/shrmD4T1dU1VdykBo/tblF0kMWjd3oHFjTu/viwJtGVG6IBJuA9En',\n    showRefresh: true,\n    useCardLayout: true,\n  }),\n  Participants: embed({\n    src:\n      'https://airtable.com/embed/shrmD4T1dU1VdykBo/tblFZsc8OLXZO9lNu/viwIW0zZjhtYz9bCS',\n    showRefresh: true,\n    useCardLayout: true,\n  }),\n  EngagementsByParticipants: embed({\n    src:\n      'https://airtable.com/embed/shrmD4T1dU1VdykBo/tblPYtZuRPJaOEywQ/viw3Ijwo7QoWXHiyH',\n    showRefresh: true,\n  }),\n};\n","import React from 'react';\n\nexport const P = ({ children }) => (\n  <p style={{ fontWeight: 500 }}>{children}</p>\n);\n","import React from 'react';\nimport Airtable from './Airtable';\nimport { P } from './widgets';\nimport { Link } from 'react-router-dom';\n\nexport default () => {\n  return (\n    <>\n      <P>\n        Incidents are overdose events reported by first responders or other\n        sources. Revere gets a weekly incident report from a public safety data\n        analyst.\n      </P>\n      <P>\n        A participant is required to record an incident. If the participant does\n        not appear in the form, please add them{' '}\n        <Link to=\"/participants\">here</Link>. In the future, we will make it\n        easier to add participants while recording incidents.\n      </P>\n      <Airtable.RecordIncidentForm />\n      <P>\n        Revere performs weekly outreach in response to incidents. Outstanding\n        incidents without outreach engagement are shown in the table below,\n        corresponding to the outreach for the week.\n      </P>\n      <Airtable.OutstandingIncidents />\n    </>\n  );\n};\n","import React from 'react';\nimport Airtable from './Airtable';\nimport { P } from './widgets';\n\nexport default () => {\n  return (\n    <>\n      <P>\n        Anyone that recieves help from WROC is a participant. Incidents and\n        engagements are attached to partipicipants. Use the form below to add a\n        new participant. Only information that is specific to the participant,\n        such as their name and housing status, are included in the data.\n      </P>\n      <Airtable.RecordParticipantForm />\n      <P>\n        Once a participant is added to the system, they will appear in the table\n        below. Clicking on a participant will show detailed personal information\n        and associated incidents and engagements.\n      </P>\n      <Airtable.Participants useCardLayout showRefresh />\n    </>\n  );\n};\n","import React from 'react';\nimport Airtable from './Airtable';\nimport { P } from './widgets';\nimport { Link } from 'react-router-dom';\n\nexport default () => {\n  return (\n    <>\n      <P>\n        Engagements are interactions between WROC and a participant. Overdose\n        outreach responses are recorded as engagements, as are interactions at\n        drop-in hours.\n      </P>\n      <P>\n        A participant is required to record an engagement. If the participant\n        does not appear in the form, please add them{' '}\n        <Link to=\"/participants\">here</Link>. In the future, we will make it\n        easier to add participants while recording engagements.\n      </P>\n      <Airtable.RecordEngagementForm />\n      <P>\n        Engagements are grouped by participant in the table below. When an\n        outreach engagement is logged, the incident will no longer appear in the\n        list of outstanding incidents.\n      </P>\n      <Airtable.EngagementsByParticipants />\n    </>\n  );\n};\n","import React from 'react';\nimport Airtable from './Airtable';\nimport { P } from './widgets';\n\nexport default () => (\n  <>\n    <P>\n      Hello! This site demonstrates workflows for running Revere's overdose\n      response. It uses{' '}\n      <a href=\"https://airtable.com/tblFZsc8OLXZO9lNu/viwIW0zZjhtYz9bCS\">\n        Airtable\n      </a>{' '}\n      to store and organize data. Click on a section above to start.\n    </P>\n    <P>\n      You can browse all data in the tables below. Each tab has several views,\n      which you can select by clicking on the arrow in the upper-left corner.\n    </P>\n    <P>\n      Hosted on{' '}\n      <a href=\"https://github.com/alexjball/harm-reduction-frontend\">Github</a>.\n    </P>\n    <Airtable.Base useCardLayout />\n  </>\n);\n","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport Incidents from './Incidents';\nimport Participants from './Participants';\nimport Engagements from './Engagements';\nimport Home from './Home';\n\nexport default () => (\n  <div className=\"content\">\n    <Switch>\n      <Route path=\"/participants\">\n        <Participants />\n      </Route>\n      <Route path=\"/incidents\">\n        <Incidents />\n      </Route>\n      <Route path=\"/engagements\">\n        <Engagements />\n      </Route>\n      <Route path=\"/\">\n        <Home />\n      </Route>\n    </Switch>\n  </div>\n);\n","import React from 'react';\nimport './App.css';\nimport TopBar from './TopBar';\nimport Content from './Content';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TopBar />\n      <Content />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}